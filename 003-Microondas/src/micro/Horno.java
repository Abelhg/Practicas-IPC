package micro;

import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;
import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;

/**
 *
 * @author Zarkrosh
 */
public class Horno extends javax.swing.JFrame {

    /**
     * Creates new form Horno
     */
    public Horno() {
        initComponents();
        setLocationRelativeTo(null);
        // Inicializa las comidas
        comidas = new ArrayList<>();
        try {
            InputStream is = getClass().getResourceAsStream(PATH_COMIDAS);
            InputStreamReader isr = new InputStreamReader(is, "UTF-8");
            BufferedReader br = new BufferedReader(isr);
            
            String linea;
            while(br.ready()){
                // Lee comidas
                String nombre = br.readLine();
                int tiempo = Integer.parseInt(br.readLine());
                int margen = Integer.parseInt(br.readLine());
                ImageIcon imagen = new ImageIcon(Base64.decode(br.readLine()));
                comidas.add(new Comida(nombre, tiempo, margen, imagen));
            }
            
            br.close();
        } catch (FileNotFoundException ex) {
            System.out.println("[!] El archivo \"comidas.txt\" no existe.");
            System.exit(-1);
        } catch (UnsupportedEncodingException ex) {
            System.out.println("[!] Codificaci√≥n no soportada. Puede haber problemas.");
        } catch (IOException ex) {
            System.out.println("[!] Error al leer el archivo \"comidas.txt\".");
        } catch (Base64DecodingException ex) {
            System.out.println("[!] Error al decodificar la imagen en Base64.");
            System.exit(-2);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pComida = new javax.swing.JPanel();
        btnComida = new javax.swing.JButton();
        pControles = new javax.swing.JPanel();
        pContador = new javax.swing.JPanel();
        vMinutos = new javax.swing.JLabel();
        separador = new javax.swing.JLabel();
        vSegundos = new javax.swing.JLabel();
        pBotones = new javax.swing.JPanel();
        btn7 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btn3 = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        btnStartStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        btnComida.setFont(new java.awt.Font("Rubik", 1, 24)); // NOI18N
        btnComida.setText("SELECCIONAR COMIDA");
        btnComida.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pComidaLayout = new javax.swing.GroupLayout(pComida);
        pComida.setLayout(pComidaLayout);
        pComidaLayout.setHorizontalGroup(
            pComidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 354, Short.MAX_VALUE)
            .addGroup(pComidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(btnComida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
        );
        pComidaLayout.setVerticalGroup(
            pComidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pComidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(btnComida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE))
        );

        getContentPane().add(pComida);

        pControles.setLayout(new java.awt.GridBagLayout());

        pContador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pContadorMouseClicked(evt);
            }
        });
        pContador.setLayout(new java.awt.GridBagLayout());

        vMinutos.setFont(new java.awt.Font("Rubik", 1, 80)); // NOI18N
        vMinutos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vMinutos.setText("00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 0.45;
        gridBagConstraints.weighty = 1.0;
        pContador.add(vMinutos, gridBagConstraints);

        separador.setFont(new java.awt.Font("Rubik", 1, 80)); // NOI18N
        separador.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        separador.setText(":");
        separador.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        pContador.add(separador, gridBagConstraints);

        vSegundos.setFont(new java.awt.Font("Rubik", 1, 80)); // NOI18N
        vSegundos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vSegundos.setText("00");
        vSegundos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 0.45;
        gridBagConstraints.weighty = 1.0;
        pContador.add(vSegundos, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pControles.add(pContador, gridBagConstraints);

        pBotones.setLayout(new java.awt.GridLayout(4, 3, 2, 2));

        btn7.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn7.setText("7");
        btn7.setMinimumSize(new java.awt.Dimension(85, 60));
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });
        pBotones.add(btn7);

        btn8.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn8.setText("8");
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });
        pBotones.add(btn8);

        btn9.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn9.setText("9");
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });
        pBotones.add(btn9);

        btn4.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn4.setText("4");
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });
        pBotones.add(btn4);

        btn5.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn5.setText("5");
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });
        pBotones.add(btn5);

        btn6.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn6.setText("6");
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });
        pBotones.add(btn6);

        btn1.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn1.setText("1");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });
        pBotones.add(btn1);

        btn2.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn2.setText("2");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });
        pBotones.add(btn2);

        btn3.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn3.setText("3");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });
        pBotones.add(btn3);

        btnClear.setFont(new java.awt.Font("Rubik", 1, 18)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        pBotones.add(btnClear);

        btn0.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        btn0.setText("0");
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn0ActionPerformed(evt);
            }
        });
        pBotones.add(btn0);

        btnStartStop.setFont(new java.awt.Font("Rubik", 1, 18)); // NOI18N
        btnStartStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/micro/imagenes/playpause.png"))); // NOI18N
        btnStartStop.setMinimumSize(new java.awt.Dimension(85, 60));
        btnStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartStopActionPerformed(evt);
            }
        });
        pBotones.add(btnStartStop);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        pControles.add(pBotones, gridBagConstraints);

        getContentPane().add(pControles);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComidaActionPerformed
        SelectorComidas s = new SelectorComidas(comidas, this);
        s.setDefaultCloseOperation(SelectorComidas.DISPOSE_ON_CLOSE);
        s.setLocationRelativeTo(null);
        s.setVisible(true);
    }//GEN-LAST:event_btnComidaActionPerformed

    private void btnStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartStopActionPerformed
        if(timer == null){
            if(!(minutos == 0 && segundos == 0)){
                // Inicia
                iniciarContador(CURRENT_MODE);
            }
        }else{
            // Pausa
            timer.cancel();
            timer.purge();
            timer = null;
        }
    }//GEN-LAST:event_btnStartStopActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        anadirDigito(1);
    }//GEN-LAST:event_btn1ActionPerformed
    
    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        anadirDigito(2);
    }//GEN-LAST:event_btn2ActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        anadirDigito(3);
    }//GEN-LAST:event_btn3ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed
        anadirDigito(4);
    }//GEN-LAST:event_btn4ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed
        anadirDigito(5);
    }//GEN-LAST:event_btn5ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed
        anadirDigito(6);
    }//GEN-LAST:event_btn6ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        anadirDigito(7);
    }//GEN-LAST:event_btn7ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed
        anadirDigito(8);
    }//GEN-LAST:event_btn8ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed
        anadirDigito(9);
    }//GEN-LAST:event_btn9ActionPerformed

    private void btn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn0ActionPerformed
        anadirDigito(0);
    }//GEN-LAST:event_btn0ActionPerformed
    
    /**
     * Pone a 0 el contador.
     * @param evt 
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        if(timer == null){
            // Solo si el micro no est√° en marcha
            minutos = segundos = 0;
            actualizarContador();
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void pContadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pContadorMouseClicked
        if(evt.getClickCount() == 2 && timer != null){
            // Esto va a coger velocidaAAAAAAAAAAAAD
            timer.cancel();
            timer.purge();
            iniciarContador((CURRENT_MODE = FAST_MODE));
        }
    }//GEN-LAST:event_pContadorMouseClicked

    /**
     * Inicia el contador con el modo actual.
     */
    private void iniciarContador(long millis){
        // Corre            
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask(){

            @Override
            public void run(){
                if(segundos > 0){
                    segundos--;
                }else{
                    if(minutos > 0){
                        minutos--;
                        segundos = 59;
                    }else{
                        // Acaba
                        System.out.println("Ding!");
                        timer.cancel();
                        timer.purge();
                        timer = null;
                        finalizado();
                        return;
                    }
                }

                actualizarContador();
            }
        }, millis/2, millis);
        
    }

    /**
     * A√±ade el siguiente d√≠gito marcado, teniendo en cuenta excepciones.
     * @param digito Numero marcado
     */
    private void anadirDigito(int digito){
        if(minutos < 10){
            // Rota los d√≠gitos a la izquierda y a√±ade el nuevo
            int decSeg = segundos / 10;
            minutos = minutos * 10 + decSeg;
            segundos = (segundos % 10) * 10 + digito;
            // Comprueba excepciones
            if(segundos >= 60){
                segundos -= 60;
                minutos++;
            }
            
            // Actualiza los valores
            actualizarContador();
        }else{
            // No hace nada, ha rellenado todos los d√≠gitos
        }
    }
    
    /**
     * Actualiza el valor mostrado por pantalla actual.
     */
    private void actualizarContador(){
        vMinutos.setText(String.format("%02d", minutos));
        vSegundos.setText(String.format("%02d", segundos));
    }
    
    /**
     * Muestra un mensaje dependiendo del alimento y el tiempo calentado.
     */
    private void finalizado(){
        // TODO
        CURRENT_MODE = NORMAL_MODE;
        System.out.println("Frio?");
    }
    
    /**
     * Carga la comida seleccionada en el microondas.
     * @param comida Comida seleccionada
     */
    public void asignarComida(Comida comida){
        if(comidaActual != null || comidaActual != comida){
            btnComida.setText("");
            btnComida.setIcon(comida.getImagen());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Horno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Horno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Horno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Horno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Horno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn0;
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnComida;
    private javax.swing.JButton btnStartStop;
    private javax.swing.JPanel pBotones;
    private javax.swing.JPanel pComida;
    private javax.swing.JPanel pContador;
    private javax.swing.JPanel pControles;
    private javax.swing.JLabel separador;
    private javax.swing.JLabel vMinutos;
    private javax.swing.JLabel vSegundos;
    // End of variables declaration//GEN-END:variables

    // Comidas
    private ArrayList<Comida> comidas;
    private final String PATH_COMIDAS = "/micro/datos/comidas.txt";
    private Comida comidaActual = null;
    // Temporizador
    private Timer timer;
    private int segundos = 0;
    private int minutos = 0;
    // Estados
    private final int NORMAL_MODE = 1000;
    private final int FAST_MODE = 50;
    private int CURRENT_MODE = NORMAL_MODE;
    
}
